<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="clr-namespace:NextUI"
                    xmlns:cv="clr-namespace:NextUI.Converters">

    <Style x:Key="NUI.Button.FocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-3"
                               StrokeThickness="2"
                               StrokeDashArray="2,1"
                               Stroke="{DynamicResource NUI.Brush.Primary}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NUI.ButtonBase.Style" TargetType="ButtonBase">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NUI.Button.FocusVisualStyle}"/>
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Light}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Dark}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource NUI.Border.Thickness}"/>
        <Setter Property="ui:NUI.CornerRadius" Value="{DynamicResource NUI.Border.CornerRadius}"/>
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height}"/>
        <Setter Property="ui:NUI.PrefixContent" Value="{x:Null}"/>
        <Setter Property="ui:NUI.SuffixContent" Value="{x:Null}"/>
        <Setter Property="Effect" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding ui:NUI.CornerRadius}"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentControl x:Name="prefixContent" Grid.Column="0"
                                            Content="{TemplateBinding ui:NUI.PrefixContent}"/>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentControl x:Name="suffixContent" Grid.Column="2"
                                            Content="{TemplateBinding ui:NUI.SuffixContent}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ui:NUI.PrefixContent" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="prefixContent" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ui:NUI.SuffixContent" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="suffixContent" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.666"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Light.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Light.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.Button.LightStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Light}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Dark}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Light.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Light.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.Button.LightStyle.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.LightStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.Button.LightStyle.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.LightStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.Button.DarkStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Dark}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Light}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Dark.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Dark.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.Button.DarkStyle.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.DarkStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.Button.DarkStyle.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.DarkStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.Button.PrimaryStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Primary}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Primary.Text}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.Button.PrimaryStyle.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.PrimaryStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.Button.PrimaryStyle.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.PrimaryStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.Button.DangerStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Danger}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Danger.Text}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Danger.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Danger.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.Button.DangerStyle.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.DangerStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.Button.DangerStyle.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.DangerStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.Button.WarningStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Warning}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Warning.Text}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Warning.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Warning.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.Button.WarningStyle.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.WarningStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.Button.WarningStyle.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.WarningStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.Button.InfoStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Info}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Info.Text}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Info.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Info.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.Button.InfoStyle.Small" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.InfoStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.Button.InfoStyle.Large" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.Button.InfoStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.ToggleButton.LightStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Light}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Border.L1}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Dark}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Light.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Light.Active}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Light.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.ToggleButton.LightStyle.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ToggleButton.LightStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.ToggleButton.LightStyle.Large" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ToggleButton.LightStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.ToggleButton.DarkStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Light}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Dark}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Dark}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Dark}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Light}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Dark.Hover}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Light}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Dark.Active}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Light}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.ToggleButton.DarkStyle.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ToggleButton.DarkStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.ToggleButton.DarkStyle.Large" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ToggleButton.DarkStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.ToggleButton.PrimaryStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Primary}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary}"/>
                <Setter Property="BorderBrush" Value="{StaticResource NUI.Brush.Primary}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Background}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary.Hover}"/>
                <Setter Property="BorderBrush" Value="{StaticResource NUI.Brush.Primary.Hover}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary.Active}"/>
                <Setter Property="BorderBrush" Value="{StaticResource NUI.Brush.Primary.Hover}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.ToggleButton.PrimaryStyle.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ToggleButton.PrimaryStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.ToggleButton.PrimaryStyle.Large" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.ToggleButton.PrimaryStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.RadioButton.PrimaryStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="{DynamicResource NUI.Brush.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NUI.Brush.Primary}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary}"/>
                <Setter Property="BorderBrush" Value="{StaticResource NUI.Brush.Primary}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Background}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary.Hover}"/>
                <Setter Property="BorderBrush" Value="{StaticResource NUI.Brush.Primary.Hover}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource NUI.Brush.Primary.Active}"/>
                <Setter Property="BorderBrush" Value="{StaticResource NUI.Brush.Primary.Hover}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource NUI.Brush.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.RadioButton.PrimaryStyle.Small" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.RadioButton.PrimaryStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Small}"/>
    </Style>

    <Style x:Key="NUI.RadioButton.PrimaryStyle.Large" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NUI.RadioButton.PrimaryStyle}">
        <Setter Property="Height" Value="{DynamicResource NUI.Size.Height.Large}"/>
    </Style>

    <Style x:Key="NUI.SysButton.TransparentStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NUI.ButtonBase.Style}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource NUI.Brush.Foreground}"/>
        <Setter Property="Width" Value="{DynamicResource NUI.Window.Caption.Height}"/>
        <Setter Property="Height" Value="{DynamicResource NUI.Window.Caption.Height}"/>
        <Setter Property="ui:NUI.IsHitTestVisibleInCaption" Value="True"/>
        <Setter Property="ui:NUI.CornerRadius" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource NUI.Brush.Background.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource NUI.Brush.Background.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.SysButton.CloseStyle" TargetType="Button" BasedOn="{StaticResource NUI.SysButton.TransparentStyle}">
        <Setter Property="Padding" Value="9"/>
        <Setter Property="Command" Value="{x:Static ui:CommonCommands.CloseWindowCommand}"/>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Content">
            <Setter.Value>
                <Viewbox>
                    <Path Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" Data="{DynamicResource NUI.Icon.Close}"/>
                </Viewbox>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource NUI.Brush.Danger.Hover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource NUI.Brush.Danger.Active}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NUI.SysButton.MinimizeButtonStyle" TargetType="Button" BasedOn="{StaticResource NUI.SysButton.TransparentStyle}">
        <Setter Property="Padding" Value="9"/>
        <Setter Property="Command" Value="{x:Static ui:CommonCommands.MinimizeWindowCommand}"/>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Content">
            <Setter.Value>
                <Viewbox>
                    <Path Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" Data="{DynamicResource NUI.Icon.Minimize}"/>
                </Viewbox>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NUI.SysButton.MaximizeOrNormalButtonStyle" TargetType="Button" BasedOn="{StaticResource NUI.SysButton.TransparentStyle}">
        <Setter Property="Padding" Value="9"/>
        <Setter Property="Command" Value="{x:Static ui:CommonCommands.MaximizeOrNormalWindowCommand}"/>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource AncestorType=Window}}"/>
        <Setter Property="Content">
            <Setter.Value>
                <Viewbox>
                    <Grid>
                        <Grid.Resources>
                            <cv:EqualsValueConverter x:Key="MaxButtonVisibleCv" TargetValue="{x:Static WindowState.Maximized}" EqualValue="{x:Static Visibility.Visible}" UnequalValue="{x:Static Visibility.Collapsed}"/>
                            <cv:EqualsValueConverter x:Key="NormalButtonVisibleCv" TargetValue="{x:Static WindowState.Normal}" EqualValue="{x:Static Visibility.Visible}" UnequalValue="{x:Static Visibility.Collapsed}"/>
                        </Grid.Resources>
                        <Path Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" Data="{DynamicResource NUI.Icon.Normal}"
                              Visibility="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=WindowState, Converter={StaticResource MaxButtonVisibleCv}}"/>
                        <Path Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" Data="{DynamicResource NUI.Icon.Maximize}"
                              Visibility="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=WindowState, Converter={StaticResource NormalButtonVisibleCv}}"/>
                    </Grid>
                </Viewbox>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>